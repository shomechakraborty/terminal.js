const terminal={Directories:{Welcome:{Helloworld:null}},workingDirectory:this.Directories.Welcome,stagingArea:[],commitedItems:[],HEAD:this.commitedItems[this.commitedItems.length-1],pwd(){return this.workingDirectory},mkdir(directory){this.Directories.push(directory={})},removeDirectory(directory){!0===this.Directories.directory&&directory.remove()},cd(directory){if(!0!==this.Directories.directory)return"No such directory exists.";this.workingDirectory=directory},touch(file){let directory;this.workingDirectory.push(file)},removeFile(file){let directory;!0===this.workingDirectory.file&&file.remove()},ls(){let directory;return this.workingDirectory},gitAdd(file){let directory;!0===this.workingDirectory.file&&this.stagingArea.push(file)},gitAddDot(){let directory=this.workingDirectory;this.stagingArea.push(directory)},gitStatus(){let trackedList=this.stagingArea,untrackedList=[];for(const directory of this.directories)for(const file of directory)this.stagingArea.includes(file)||untrackedList.push(file);return`Changes to be committed: ${trackedList}. Untracked items: ${untrackedList}`},gitResetHEAD(){for(let i=this.stagingArea.length;i>0;i--)this.stagingArea.shift()},gitCommit(Message){let SHA=0;for(let i=0;i<7;i++)SHA+=Math.floor(9*Math.random());let itemsCommited=this.stagingArea;this.commitedItems.push({Message:Message,SHA:SHA,itemsCommited:itemsCommited}),this.gitResetHEAD(),this.HEAD=this.commitedItems[this.commitedItems.length-1]},gitLog(){return this.commitedItems},gitReset(SHA){for(const commitedObject of this.commitedItems)commitedObject.SHA===SHA&&(this.HEAD=commitedObject)}};terminal.gitStatus();